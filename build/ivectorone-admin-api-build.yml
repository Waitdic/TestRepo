trigger:
  branches:
    include:
    - main
  paths:
    include:
    - src/iVectorOne-Admin-Api

pool:
  vmImage: 'windows-latest'

variables:
- name : project
  value: 'iVectorOne-Admin-Api'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name:  majorVersion
  value: '2'
- name:  appVersion
  value : ''

steps:

- task: PowerShell@2
  displayName: 'Set Version Number'
  inputs:
    targetType: 'inline'
    script: |
      $Year = (Get-Date).Year.ToString().SubString(2, 2)
      $DayOfYear = (Get-Date).DayOfYear
      $minorVersion =  $Year + $DayOfYear
      $Build = - [Math]::Truncate(((Get-Date -Hour 0 -Minute 0 -Second 0) - (Get-Date)).TotalMinutes)
      $VersionString = ($(majorVersion)).ToString() + '.' + $minorVersion + '.' + $Build.ToString() + '.' + $(Build.BuildId)
      Write-Host "##vso[task.setvariable variable=appVersion;]$VersionString"

- task: Assembly-Info-NetCore@3
  displayName: 'Set Assembly Metadata'
  inputs:
    Path: '$(Build.SourcesDirectory)/src/$(project)'
    FileNames: '**/*.csproj'
    InsertAttributes: true
    FileEncoding: 'auto'
    WriteBOM: false
    LogLevel: 'verbose'
    FailOnWarning: false
    DisableTelemetry: false
    Company: 'Intuitive Systems'
    Product: 'iVectorOne Admin Api'
    Description: 'iVectorOne Admin Api'
    Copyright: 'Copyright Â© $(date:YYYY) Intuitive Systems'
    Culture: 'en-GB'
    VersionNumber: '$(appVersion)'
    FileVersionNumber: '$(appVersion)'
    InformationalVersion: '$(appVersion)'
    PackageVersion: '$(appVersion)'
    IgnoreNetFrameworkProjects: false
    UpdateBuildNumber: '$(Build.DefinitionName)_$(appVersion)'
    AddBuildTag: 'v$(appVersion)'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'intuitive-systems'
    scannerMode: 'MSBuild'
    projectKey: 'Intuitive_iVectorOne_Admin_Api'
    projectName: 'iVectorOne Admin Api'

- task: DotNetCoreCLI@2
  displayName: 'Build Project'
  inputs:
    command: 'build'
    projects: 'src/$(project)/**/*.csproj'
    arguments: '-c $(buildConfiguration) -o $(build.artifactStagingDirectory)'


- task: DotNetCoreCLI@2
  displayName: 'Test Project'
  inputs:
    command: 'test'
    projects: 'test/$(project)**/*.csproj'
    arguments: '-c $(buildConfiguration)'
    testRunTitle: 'Unit Tests'

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: DotNetCoreCLI@2
  displayName: 'Publish Project'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'src/$(project)/**/*.csproj'
    arguments: '-c $(buildConfiguration) -o $(build.artifactStagingDirectory)/path_$(project)_$(AssemblyInfo.FileVersion)'
    zipAfterPublish: True
    modifyOutputPath: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'
  inputs:
    PathtoPublish: '$(build.artifactStagingDirectory)/path_$(project)_$(AssemblyInfo.FileVersion)'
    ArtifactName: 'art_$(project)_$(AssemblyInfo.FileVersion)'
    publishLocation: 'Container'