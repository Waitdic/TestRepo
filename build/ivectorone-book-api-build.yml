trigger:
  branches:
    include:
    - main

pool:
  vmImage: 'windows-latest'

variables:
- name : project
  value: 'iVectorOne-Search-Api'
- name : testProject
  value: 'iVectorOne-Search-Api-BuildTests'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name:  appVersion
  value : ''
- name:  iisFolder
  value : 'D:\Websites\iVectorOne'
- name:  iisAppPool
  value : 'api.ivectorone.com'
- name:  codeDeployAppName
  value : 'IVOSearch'
- name:  codeDeployGroupName
  value : 'Book'

stages:
- stage: build

  jobs:
  - job: build
    displayName: 'Build the application'
    steps:

    - task: PowerShell@2
      displayName: 'Set Version Number'
      inputs:
        targetType: 'inline'
        name: setVersionNumber
        script: |
          $majorVersion = (Get-Date).ToString("yy") + (Get-Date).ToString("MM")
          $minorVersion =  (Get-Date).ToString("dd")
          $build = - [Math]::Truncate(((Get-Date -Hour 0 -Minute 0 -Second 0) - (Get-Date)).TotalMinutes)
          $VersionString = $majorVersion + '.' + $minorVersion + '.' + $build + '.' + $(Build.BuildId)
          Write-Host "##vso[task.setvariable variable=appVersion;]$VersionString"

    - task: Assembly-Info-NetCore@3
      displayName: 'Set Assembly Metadata'
      inputs:
        Path: '$(Build.SourcesDirectory)/src/$(project)'
        FileNames: '**/*.csproj'
        InsertAttributes: true
        FileEncoding: 'auto'
        WriteBOM: false
        LogLevel: 'verbose'
        FailOnWarning: false
        DisableTelemetry: false
        Company: 'Intuitive Systems'
        Product: 'iVectorOne Search Api'
        Description: 'iVectorOne Search Api'
        Copyright: 'Copyright Â© $(date:YYYY) Intuitive Systems'
        Culture: 'en-GB'
        VersionNumber: '$(appVersion)'
        FileVersionNumber: '$(appVersion)'
        InformationalVersion: '$(appVersion)'
        PackageVersion: '$(appVersion)'
        IgnoreNetFrameworkProjects: false
        UpdateBuildNumber: '$(Build.DefinitionName)_$(appVersion)'
        AddBuildTag: 'v$(appVersion)'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'intuitive-systems'
        scannerMode: 'MSBuild'
        projectKey: 'Intuitive_iVectorOne_Search_Api'
        projectName: 'iVectorOne Search Api'

    - task: NuGetAuthenticate@1
      inputs:
        nuGetServiceConnections: 'Intuitive'

    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '**/*.sln'
        feedsToUse: 'config'
        nugetConfigPath: 'NuGet.config'
        externalFeedCredentials: 'Intuitive'
        noCache: true
      continueOnError: true

    - task: DotNetCoreCLI@2
      displayName: 'Build Project'
      inputs:
        command: 'build'
        projects: 'src/$(project)/**/*.csproj'
        arguments: '-c $(buildConfiguration) -o $(build.artifactStagingDirectory) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Test Project'
      inputs:
        command: 'test'
        projects: 'tests/$(testProject)**/*.csproj'
        arguments: '-c $(buildConfiguration) --no-restore'
        testRunTitle: 'Unit Tests'

    - task: SonarCloudAnalyze@1
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Project'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'src/$(project)/**/*.csproj'
        arguments: '--no-restore -c $(buildConfiguration) -o $(build.artifactStagingDirectory)/$(project)_$(appVersion)'
        zipAfterPublish: True
        modifyOutputPath: false

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(build.artifactStagingDirectory)/$(project)_$(appVersion)'
        ArtifactName: '$(project)_$(appVersion)'
        publishLocation: 'Container'

- stage: deploy_test
  dependsOn:
  - build
  jobs:
  - job: deploy
    displayName: 'Deploy to test'
    steps:

    - task: DownloadPipelineArtifact@2
      variables:
        buildAppVersion: $[stageDependencies.build.build.outputs['setVersionNumber.appVersion']
      inputs:
        buildType: 'current'
        artifactName: '$(project)_$(buildAppVersion)'
        targetPath: '$(Build.artifactStagingDirectory)/code-deploy/'

    - task: PowerShell@2
      displayName: 'Create appspec.yml'
      inputs:
        targetType: 'inline'
        script: |
          $appSpecContent = "{0}: 0.0 `n" -f "version"
          $appSpecContent += "{0}: windows `n" -f "os"
          $appSpecContent += "{0}: `n" -f "files"
          $appSpecContent += "  - {0}: \source\ `n" -f "source"
          $appSpecContent += "    {0}: D`:\builds\$(project) `n" -f "destination"
          $appSpecContent += "{0}: `n" -f "hooks"
          $appSpecContent += "  {0}: `n" -f "AfterInstall"
          $appSpecContent += "    - {0}: scripts\DeployUpdate.bat`n" -f "location"
          $appSpecContent += "      {0}: 180`n" -f "timeout"

          New-Item -Path $(Build.artifactStagingDirectory) -Force -Name "code-deploy" -ItemType "directory"
          New-Item -Path $(Build.artifactStagingDirectory) -Force -Name "code-deploy/scripts" -ItemType "directory"
          New-Item -Path "$(Build.artifactStagingDirectory)/code-deploy" -Name "appspec.yml" -ItemType "file" -Value $appSpecContent

    - task: CopyFiles@2
      inputs:
        SourceFolder: $(Build.Repository.LocalPath)/build/scripts
        Contents: '**'
        TargetFolder: $(Build.artifactStagingDirectory)/code-deploy/scripts

    - task: PowerShell@2
      displayName: 'Update deploy script paths'
      inputs:
        targetType: 'inline'
        script: |
          (Get-Content $(Build.artifactStagingDirectory)/code-deploy/scripts/DeployUpdate.bat) -Replace '{source}', 'D:\builds\$(project)' | Set-Content $(Build.artifactStagingDirectory)/code-deploy/scripts/DeployUpdate.bat
          (Get-Content $(Build.artifactStagingDirectory)/code-deploy/scripts/DeployUpdate.bat) -Replace '{destination}', '$(iisFolder)' | Set-Content $(Build.artifactStagingDirectory)/code-deploy/scripts/DeployUpdate.bat
          (Get-Content $(Build.artifactStagingDirectory)/code-deploy/scripts/DeployUpdate.bat) -Replace '{apppool}', '$(iisAppPool)' | Set-Content $(Build.artifactStagingDirectory)/code-deploy/scripts/DeployUpdate.bat

    - task: PowerShell@2
      displayName: 'Get version from build stage'
      inputs:
        targetType: 'inline'
        script: |
          $VersionString = Get-Content $(Build.artifactStagingDirectory)/code-deploy/version.txt
          $VersionString = $VersionString.replace(".", "-")
          Write-Host "##vso[task.setvariable variable=appVersion;]$VersionString"

    - task: ArchiveFiles@2
      displayName: 'Create code deploy zip'
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/code-deploy'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(project)-$(appVersion).zip'
        replaceExistingArchive: true

    - task: CodeDeployDeployApplication@1
      displayName: 'Push Artifact to AWS'
      inputs:
        awsCredentials: 'AWS S3 Bucket for Code Deploy'
        regionName: 'eu-west-1'
        applicationName: $(codeDeployAppName)
        deploymentGroupName: $(codeDeployGroupName)
        deploymentRevisionSource: 'workspace'
        revisionBundle: '$(Build.ArtifactStagingDirectory)/$(project)-$(appVersion).zip'
        bucketName: 'ivectorone-codedeploy'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/$(project)-$(appVersion).zip'
        publishLocation: 'pipeline'
        artifactName: '$(project)-$(appVersion)'