trigger:
  branches:
    include:
    - main
  paths:
    include:
    - src/iVectorOne-Admin-Api
    - tests/iVectorOne-Admin-Api-BuildTests

pool:
  vmImage: windows-latest

variables:
- name : project
  value: 'iVectorOne-Admin-Api'
- name : testProject
  value: 'iVectorOne-Admin-Api-BuildTests'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name:  appVersion
  value : ''

# stages:
# - stage: build
#   jobs:
#   - job:
#     displayName: 'Build the application'

steps:
- task: PowerShell@2
  displayName: 'Set Version Number'
  inputs:
    targetType: 'inline'
    script:
      $majorVersion = (Get-Date).ToString("yy") + (Get-Date).ToString("MM")
      $minorVersion =  (Get-Date).ToString("dd")
      $build = - [Math]::Truncate(((Get-Date -Hour 0 -Minute 0 -Second 0) - (Get-Date)).TotalMinutes)
      $VersionString = $majorVersion + '.' + $minorVersion + '.' + $build + '.' + $(Build.BuildId)
      Write-Host "##vso[task.setvariable variable=appVersion;]$VersionString"

#     - task: Assembly-Info-NetCore@3
#       displayName: 'Set Assembly Metadata'
#       inputs:
#         Path: '$(Build.SourcesDirectory)/src/$(project)'
#         FileNames: '**/*.csproj'
#         InsertAttributes: true
#         FileEncoding: 'auto'
#         WriteBOM: false
#         LogLevel: 'verbose'
#         FailOnWarning: false
#         DisableTelemetry: false
#         Company: 'Intuitive'
#         Product: 'iVectorOne Admin Api'
#         Description: 'iVectorOne Admin Api'
#         Copyright: 'Copyright Â© $(date:YYYY) Intuitive'
#         Culture: 'en-GB'
#         VersionNumber: '$(appVersion)'
#         FileVersionNumber: '$(appVersion)'
#         InformationalVersion: '$(appVersion)'
#         PackageVersion: '$(appVersion)'
#         IgnoreNetFrameworkProjects: false
#         UpdateBuildNumber: '$(Build.DefinitionName)_$(appVersion)'
#         AddBuildTag: 'v$(appVersion)'

#     - task: SonarCloudPrepare@1
#       inputs:
#         SonarCloud: 'SonarCloud'
#         organization: 'intuitive-systems'
#         scannerMode: 'MSBuild'
#         projectKey: 'Intuitive_iVectorOne_Admin_Api'
#         projectName: 'iVectorOne Admin Api'

#     - task: DotNetCoreCLI@2
#       displayName: 'Build Project'
#       inputs:
#         command: 'build'
#         projects: 'src/$(project)/**/*.csproj'
#         arguments: '-c $(buildConfiguration) -o $(Build.artifactStagingDirectory)/code-deploy/source'

#     - task: DotNetCoreCLI@2
#       displayName: 'Test Project'
#       inputs:
#         command: 'test'
#         projects: 'tests/$(testProject)**/*.csproj'
#         arguments: '-c $(buildConfiguration)'
#         testRunTitle: 'Unit Tests'

#     - task: SonarCloudAnalyze@1

#     - task: SonarCloudPublish@1
#       inputs:
#         pollingTimeoutSec: '300'

# - stage: deploy_test
#   dependsOn:
#     - build
#   jobs:
#   - job:
#     displayName: 'Deploy to test'
#     steps:
#     - task: PowerShell@2
#       displayName: 'Set Version Number'
#       inputs:
#         targetType: 'inline'
#         script: |
#           $appSpecContent = @"
#             version: 0.0
#             os: windows
#             files:
#               - source: \index.html
#                 destination: C:\inetpub\wwwroot      
#           "

#           Add-Content $(Build.artifactStagingDirectory)/code-deploy/appspec.yml $contentToAdd

#     - task: ArchiveFiles@2
#       inputs:
#         rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/code-deploy'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#         replaceExistingArchive: true

#     # - task: S3Upload@1
#     #   inputs:
#     #     awsCredentials: 'AWS S3 Bucket for Code Deploy'
#     #     regionName: 'eu-west-1'
#     #     bucketName: 'ivectorone-codedeploy'
#     #     sourceFolder: '$(Build.ArtifactStagingDirectory)'
#     #     globExpressions: '*.zip'

#     - task: PublishPipelineArtifact@1
#       inputs:
#         targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#         publishLocation: 'pipeline'
#         artifactName: '$(project)_$(appVersion)'